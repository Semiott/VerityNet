{
  "contractName": "EscapeVerifier",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[63]",
          "name": "tables",
          "type": "address[63]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "escapeProof",
          "type": "uint256[]"
        }
      ],
      "name": "verifyEscape",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "val",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[63]\",\"name\":\"tables\",\"type\":\"address[63]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"escapeProof\",\"type\":\"uint256[]\"}],\"name\":\"verifyEscape\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"verifyEscape(uint256[])\":{\"notice\":\"Verifies that the contents of a vault belong to a certain Merkle commitment (root). The Merkle commitment uses the Pedersen hash variation described next: - **Hash constants:** A sequence :math:`p_i` of 504 points on an elliptic curve and an additional :math:`ec_{shift}` point - **Input:** A vector of 504 bits :math:`b_i` - **Output:** The 252 bits x coordinate of :math:`(ec_{shift} + \\\\sum_i b_i*p_i)` The following table describes the expected `escapeProof` format. Note that unlike a standard Merkle proof, the `escapeProof` contains both the nodes along the Merkle path and their siblings. The proof ends with the expected root and the ID of the vault for which the proof is submitted (which implies the location of the nodes within the Merkle tree). +-------------------------------+---------------------------+-----------+ | starkKey (252)                | tokenId (252)             | zeros (8) | +-------------------------------+---------------------------+-----------+ | hash(starkKey, tokenId) (252) | quantizedAmount (252)     | zeros (8) | +-------------------------------+---------------------------+-----------+ | left_node_0 (252)             | right_node_0 (252)        | zeros (8) | +-------------------------------+---------------------------+-----------+ | ...                                                                   | +-------------------------------+---------------------------+-----------+ | left_node_n (252)             | right_node_n (252)        | zeros (8) | +-------------------------------+-----------+---------------+-----------+ | root (252)                    | zeros (4) | vaultId (248) | zeros (8) | +-------------------------------+-----------+---------------+-----------+ If the proof is accepted, this is registered under the following claim hash that may later be queried for validity: `claimHash = keccak256(starkKey, tokenId, quantizedAmount, vaultRoot, treeHeight, vaultId)` For information about when this module is to be used, see :sol:mod:`Escapes`.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/gokulalex/Apps/eth_apps/VerityNet/starkex-deployment/scalable-dex/contracts/components/EscapeVerifier.sol\":\"EscapeVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/gokulalex/Apps/eth_apps/VerityNet/starkex-deployment/scalable-dex/contracts/components/EscapeVerifier.sol\":{\"keccak256\":\"0x562385add3940c8daa93333065bc178d4d3ce318d68ab1836d697c324ae4989f\",\"urls\":[\"bzz-raw://53461e0e135ad7ff1d93a5b41eb816ff2b4fbb4e1af50afec5473796dc7013d1\",\"dweb:/ipfs/QmbZUbgXDmfZiG6messeLJngnLVxwLU3hPFJEYawSBYhNR\"]},\"/Users/gokulalex/Apps/eth_apps/VerityNet/starkex-deployment/scalable-dex/contracts/interfaces/IFactRegistry.sol\":{\"keccak256\":\"0x7f4e47365a887730d676a98fa96cee9273abf09655bafe2a224c9a9398732214\",\"urls\":[\"bzz-raw://21223482a9890cd6ba8c733d891923fc12ca1c9d6f147212f77a2f8a0a0af52d\",\"dweb:/ipfs/QmWH8jxhSRVaEMyEY4XjwBPSGNZKM9xY2a7zh2bycKgUjH\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516107e83803806107e883398181016040526107e081101561003457600080fd5b810190809190505080600090603f61004d929190610062565b50600080111561005c57600080fd5b50610122565b82603f81019282156100ce579160200282015b828111156100cd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610075565b5b5090506100db91906100df565b5090565b61011f91905b8082111561011b57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016100e5565b5090565b90565b6106b7806101316000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632dd530061461003b5780636a938567146100b4575b600080fd5b6100b26004803603602081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460208302840111640100000000831117156100a257600080fd5b90919293919293905050506100fa565b005b6100e0600480360360208110156100ca57600080fd5b8101908080359060200190929190505050610677565b604051808215151515815260200191505060405180910390f35b60008282905090506044811015610179576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f50726f6f6620746f6f2073686f72742e0000000000000000000000000000000081525060200191505060405180910390fd5b60c881106101ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f50726f6f6620746f6f206c6f6e672e000000000000000000000000000000000081525060200191505060405180910390fd5b60006001821614610268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f50726f6f66206c656e677468206d757374206265206576656e2e00000000000081525060200191505060405180910390fd5b600060028083038161027657fe5b04905060006002820390506000600886866001870381811061029457fe5b90506020020135901c90508160020a8110610317576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f7661756c744964206e6f7420696e20747265652e00000000000000000000000081525060200191505060405180910390fd5b60006020846002020290506060878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505090506020810190506103ac565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260206004528160245280604452816044016000fd5b805160041c7f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601f830151167f080000000000001100000000000000000000000000000000000000000000000080821181841117156104315761043060187f42616420737461726b4b6579206f7220746f6b656e49642e0000000000000000610373565b5b8560011b604051603f8702810160005b603f811015610471578889820284018a838b0184545afa610466573d6000803e3d6000fd5b600181019050610441565b5060008060007f08000000000000110000000000000000000000000000000000000000000000015b8b84101561061757838601925060019150825160208401518d850194505b86851015610525578451602086015185850385868383098508868483098781880888818209898a8a8c03850183098b8d8d88890909088a8c83098b8185099c508b8c8d8b8409848f030188098d8f8b098e030899508b8483099a505050505050505050508d850194506104b7565b604086019550858d015160041c7f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601f88018f0151168b81118c831117156105935761059260137f56616c7565206f7574206f662072616e67652e00000000000000000000000000610373565b5b60018b16156105a0578091505b856105d1576105d0600b7f615a206973207a65726f2e000000000000000000000000000000000000000000610373565b5b848683098403156106085761060760107f426164204d65726b6c6520706174682e00000000000000000000000000000000610373565b5b8a60011c9a5050505050610499565b89600052886020527f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff605f8c0151166040528b8b015160041c6060528d6080528c60a052600160c060002055505050505050505050505050505050505050565b60008154905091905056fea265627a7a723158206c822f05f8f5bcf0e41e3cb398f4743402788df776cf94644f00dca6c3c50d9864736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632dd530061461003b5780636a938567146100b4575b600080fd5b6100b26004803603602081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460208302840111640100000000831117156100a257600080fd5b90919293919293905050506100fa565b005b6100e0600480360360208110156100ca57600080fd5b8101908080359060200190929190505050610677565b604051808215151515815260200191505060405180910390f35b60008282905090506044811015610179576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f50726f6f6620746f6f2073686f72742e0000000000000000000000000000000081525060200191505060405180910390fd5b60c881106101ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f50726f6f6620746f6f206c6f6e672e000000000000000000000000000000000081525060200191505060405180910390fd5b60006001821614610268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f50726f6f66206c656e677468206d757374206265206576656e2e00000000000081525060200191505060405180910390fd5b600060028083038161027657fe5b04905060006002820390506000600886866001870381811061029457fe5b90506020020135901c90508160020a8110610317576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f7661756c744964206e6f7420696e20747265652e00000000000000000000000081525060200191505060405180910390fd5b60006020846002020290506060878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505090506020810190506103ac565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260206004528160245280604452816044016000fd5b805160041c7f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601f830151167f080000000000001100000000000000000000000000000000000000000000000080821181841117156104315761043060187f42616420737461726b4b6579206f7220746f6b656e49642e0000000000000000610373565b5b8560011b604051603f8702810160005b603f811015610471578889820284018a838b0184545afa610466573d6000803e3d6000fd5b600181019050610441565b5060008060007f08000000000000110000000000000000000000000000000000000000000000015b8b84101561061757838601925060019150825160208401518d850194505b86851015610525578451602086015185850385868383098508868483098781880888818209898a8a8c03850183098b8d8d88890909088a8c83098b8185099c508b8c8d8b8409848f030188098d8f8b098e030899508b8483099a505050505050505050508d850194506104b7565b604086019550858d015160041c7f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601f88018f0151168b81118c831117156105935761059260137f56616c7565206f7574206f662072616e67652e00000000000000000000000000610373565b5b60018b16156105a0578091505b856105d1576105d0600b7f615a206973207a65726f2e000000000000000000000000000000000000000000610373565b5b848683098403156106085761060760107f426164204d65726b6c6520706174682e00000000000000000000000000000000610373565b5b8a60011c9a5050505050610499565b89600052886020527f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff605f8c0151166040528b8b015160041c6060528d6080528c60a052600160c060002055505050505050505050505050505050505050565b60008154905091905056fea265627a7a723158206c822f05f8f5bcf0e41e3cb398f4743402788df776cf94644f00dca6c3c50d9864736f6c63430005100032",
  "sourceMap": "264:14635:6:-;;;455:588;8:9:-1;5:2;;;30:1;27;20:12;5:2;455:588:6;;;;;;;;;;;;;;;13:4:-1;8:3;5:13;2:2;;;31:1;28;21:12;2:2;455:588:6;;;;;;;;540:6;525:12;:21;;;;;;;:::i;:::-;;669:1;650:17;647:24;644:2;;;1010:1;1007;1000:12;644:2;630:407;264:14635;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "264:14635:6:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;264:14635:6;;;;;;;;;;;;;;;;;;;;;;;;4991:9531;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4991:9531:6;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4991:9531:6;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4991:9531:6;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;4991:9531:6;;;;;;;;;;;;:::i;:::-;;14695:202;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14695:202:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4991:9531;5064:19;5086:11;;:18;;5064:40;;5473:2;5458:11;:17;;5450:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5725:3;5711:11;:17;5703:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5848:1;5842;5828:11;:15;5827:22;5819:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5982:15;6020:1;6015;6001:11;:15;6000:21;;;;;;5982:39;;6080:14;6107:1;6097:7;:11;6080:28;;6283:15;6333:1;6301:11;;6327:1;6313:11;:15;6301:28;;;;;;;;;;;;;:33;;6283:51;;6365:6;6362:1;:9;6352:7;:19;6344:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6407:15;6441:4;6430:7;6426:1;:11;6425:20;6407:38;;6455:22;6480:11;;6455:36;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6455:36:6;;;;;;;;6659:4;6652:5;6648:16;6639:25;;6678:657;;;7098:66;7095:1;7088:77;7194:4;7189:3;7182:17;7229:7;7223:4;7216:21;7267:7;7261:4;7254:21;7312:7;7306:4;7302:18;7299:1;7292:29;6717:618;7378:5;7372:12;7369:1;7365:20;7473:66;7434:4;7427:5;7423:16;7417:23;7413:127;7575:65;7700:13;7691:7;7688:26;7672:13;7662:8;7659:27;7656:59;7653:2;;;7734:43;7774:2;7746:26;7734:43;;;7653:2;7907:7;7904:1;7900:15;8026:4;8020:11;8096:2;8075:7;8071:28;8064:5;8060:40;8199:1;8184:335;8209:2;8206:1;8203:9;8184:335;;;8375:7;8364;8361:1;8357:15;8350:5;8346:27;8300:7;8296:1;8289:5;8285:13;8281:1;8275:8;8270:3;8259:124;8249:2;;8427:14;8424:1;8421;8406:36;8472:14;8469:1;8462:25;8249:2;8227:1;8224;8220:9;8215:14;;8184:335;;;8188:14;8710:1;;;8777:65;9136:4769;9155:7;9147:6;9144:19;9136:4769;;;9326:6;9319:5;9315:18;9308:25;;9356:1;9350:7;;9390:3;9384:10;9436:4;9431:3;9427:14;9421:21;9482:7;9477:3;9473:17;9466:24;;9460:2333;9501:8;9496:3;9493:17;9460:2333;;;9598:3;9592:10;9648:4;9643:3;9639:14;9633:21;9803:2;9796:5;9792:14;9999:5;9991;9987:2;9978:7;9971:26;9967:2;9960:45;10064:5;10060:2;10051:7;10044:26;10165:5;10154:9;10150:2;10143:28;10221:5;10217:2;10213;10206:21;10812:5;10768;10718:2;10711:5;10707:14;10696:9;10692:30;10641:5;10634:140;10590:5;10586:2;10578:5;10574:2;10570;10563:21;10556:40;10549:269;10909:5;10905:2;10898:5;10891:24;11170:5;11166:2;11162;11155:21;11149:27;;11574:5;11534;11489;11485:2;11481;11474:21;11429:2;11422:5;11418:14;11414:82;11374:2;11367:173;11322:5;11318:2;11314;11307:21;11300:5;11296:33;11289:291;11283:297;;11769:5;11765:2;11761;11754:21;11748:27;;9559:2234;;;;;;;;;9548:7;9543:3;9539:17;9533:23;;9460:2333;;;12242:4;12234:6;12230:17;12220:27;;12429:6;12422:5;12418:18;12412:25;12409:1;12405:33;12572:66;12543:4;12535:6;12531:17;12524:5;12520:29;12514:36;12474:165;12785:13;12773:10;12770:29;12754:13;12739;12736:32;12733:67;12730:2;;;12823:38;12858:2;12835:21;12823:38;;;12730:2;12919:1;12904:13;12900:21;12897:2;;;12961:10;12944:27;;12897:2;13619;13609;;13644:30;13671:2;13656:13;13644:30;;;13609:2;13747:5;13743:2;13728:13;13721:32;13717:2;13713:41;13710:2;;;13783:35;13815:2;13795:18;13783:35;;;13710:2;13877:13;13874:1;13870:21;13853:38;;9168:4737;;;;9136:4769;;;13929:8;13926:1;13919:19;13965:7;13958:4;13951:22;14090:66;14059:4;14052:5;14048:16;14042:23;14038:119;13993:4;13986:172;14208:7;14201:5;14197:19;14191:26;14188:1;14184:34;14178:4;14171:48;14258:6;14252:4;14245:20;14291:7;14285:4;14278:21;14504:1;14497:4;14494:1;14484:18;14477:29;6574:7942;;;;;;;;;;;;;;;;;;:::o;14695:202::-;14752:8;14876:4;14870:11;14863:18;;14849:42;;;:::o",
  "source": "pragma solidity ^0.5.2;\n\nimport \"../interfaces/IFactRegistry.sol\";\n\n/*\n  An escapeVerifier is a fact registry contract for claims of the form:\n  (starkKey, tokenId, quantizedAmount) is the leaf in index vaultId of a Merkle tree with\n  specific height and root.\n*/\ncontract EscapeVerifier is IFactRegistry {\n\n    // Note that those values are hardcoded in the assembly.\n    uint256 constant internal N_TABLES = 63;\n\n    address[N_TABLES] lookupTables;\n    constructor(address[N_TABLES] memory tables)\n        public {\n        lookupTables = tables;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            if gt(lookupTables_slot, 0) {\n                // The address of the lookupTables must be 0.\n                // This is guaranteed by the ABI, as long as it is the first storage variable.\n                // This is an assumption in the implementation, and can be removed if\n                // the lookup table address is taken into account.\n                revert(0, 0)\n            }\n\n        }\n    }\n\n    /**\n      Verifies that the contents of a vault belong to a certain Merkle commitment (root).\n\n      The Merkle commitment uses the Pedersen hash variation described next:\n\n      - **Hash constants:** A sequence :math:`p_i` of 504 points on an elliptic curve and an additional :math:`ec_{shift}` point\n      - **Input:** A vector of 504 bits :math:`b_i`\n      - **Output:** The 252 bits x coordinate of :math:`(ec_{shift} + \\sum_i b_i*p_i)`\n\n      The following table describes the expected `escapeProof` format. Note that unlike a standard\n      Merkle proof, the `escapeProof` contains both the nodes along the Merkle path and their\n      siblings. The proof ends with the expected root and the ID of the vault for which the proof is\n      submitted (which implies the location of the nodes within the Merkle tree).\n\n          +-------------------------------+---------------------------+-----------+\n          | starkKey (252)                | tokenId (252)             | zeros (8) |\n          +-------------------------------+---------------------------+-----------+\n          | hash(starkKey, tokenId) (252) | quantizedAmount (252)     | zeros (8) |\n          +-------------------------------+---------------------------+-----------+\n          | left_node_0 (252)             | right_node_0 (252)        | zeros (8) |\n          +-------------------------------+---------------------------+-----------+\n          | ...                                                                   |\n          +-------------------------------+---------------------------+-----------+\n          | left_node_n (252)             | right_node_n (252)        | zeros (8) |\n          +-------------------------------+-----------+---------------+-----------+\n          | root (252)                    | zeros (4) | vaultId (248) | zeros (8) |\n          +-------------------------------+-----------+---------------+-----------+\n\n      If the proof is accepted, this is registered under the following claim hash that may later\n      be queried for validity:\n\n        `claimHash = keccak256(starkKey, tokenId, quantizedAmount, vaultRoot, treeHeight, vaultId)`\n\n      For information about when this module is to be used, see :sol:mod:`Escapes`.\n\n    */\n    /*\n      Implementation details:\n      The EC sum required for the hash computation is computed using lookup tables and EC additions.\n      There are 63 lookup tables and each table contains all the possible subset sums of the\n      corresponding 8 EC points in the hash definition.\n\n      Both the full subset sum and the tables are shifted to avoid a special case for the 0 point.\n      lookupTables[0] uses the offset 2^62*ec_shift and lookupTables[k] for k > 0 uses\n      the offset 2^(62-k)*(-ec_shift).\n      Note that the sum of the shifts of all the tables is exactly the shift required for the\n      hash. Moreover, the partial sums of those shifts are never 0.\n\n      The calls to the lookup table contracts are batched to save on gas cost.\n      We allocate a table of N_HASHES by N_TABLES EC elements.\n      Fill the i'th row by calling the i'th lookup contract to lookup the i'th byte in each hash and\n      then compute the j'th hash by summing the j'th column.\n\n                  N_HASHES\n              --------------\n              |            |\n              |            |\n              |            |\n              |            | N_TABLES\n              |            |\n              |            |\n              |            |\n              |            |\n              --------------\n\n      The batched lookup is facilitated by the fact that the escapeProof includes nodes along the\n      Merkle path.\n      However having this redundant information requires us to do consistency checks\n      to ensure we indeed verify a coherent authentication path:\n\n          hash((left_node_{i-1}, right_node_{i-1})) ==\n            (vaultId & (1<<i)) == 0 ? left_node_i : right_node_i.\n    */\n    function verifyEscape(uint256[] calldata escapeProof) external {\n        uint256 proofLength = escapeProof.length;\n\n        // The minimal supported proof length is for a tree height of 31 in a 68 word representation as follows:\n        // 1. 2 word pairs representing the vault contents + one hash of the 1st pair.\n        // 2. 31  word pairs representing the authentication path.\n        // 3. 1 word pair representing the root and the leaf index.\n        require(proofLength >= 68, \"Proof too short.\");\n\n        // The contract supports verification paths of lengths up to 97 in a 200 word representation as described above.\n        // This limitation is imposed in order to avoid potential attacks.\n        require(proofLength < 200, \"Proof too long.\");\n\n        // Ensure proofs are always a series of word pairs.\n        require((proofLength & 1) == 0, \"Proof length must be even.\");\n\n        // Each hash takes 2 256bit words and the last two words are the root and vaultId.\n        uint256 nHashes = (proofLength - 2) / 2;\n\n        // We use 2 hashes to compute the leaf.\n        uint256 height = nHashes - 2;\n\n        // Note that it is important to limit the range of vault id, to make sure\n        // we use the node = Merkle_root in the last iteration of the loop below.\n        uint256 vaultId = escapeProof[proofLength - 1] >> 8;\n        require(vaultId < 2**height, \"vaultId not in tree.\");\n\n        uint256 rowSize = (2 * nHashes) * 0x20;\n        uint256[] memory proof = escapeProof;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            // Skip the length of the proof array.\n            proof := add(proof, 0x20)\n\n            function raise_error(message, msg_len) {\n                // Solidity generates reverts with reason that look as follows:\n                // 1. 4 bytes with the constant 0x08c379a0 (== Keccak256(b'Error(string)')[:4]).\n                // 2. 32 bytes offset bytes (typically 0x20).\n                // 3. 32 bytes with the length of the revert reason.\n                // 4. Revert reason string.\n\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(0x4, 0x20)\n                mstore(0x24, msg_len)\n                mstore(0x44, message)\n                revert(0, add(0x44, msg_len))\n            }\n\n            let starkKey := shr(4, mload(proof))\n            let tokenId := and(mload(add(proof, 0x1f)),\n                               0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n            let primeMinusOne := 0x800000000000011000000000000000000000000000000000000000000000000\n            if or(gt(starkKey, primeMinusOne), gt(tokenId, primeMinusOne)) {\n                raise_error(\"Bad starkKey or tokenId.\", 24)\n            }\n\n            // hash(starkKey, tokenId) is on the left of the second hash.\n            let nodeSelectors := shl(1, vaultId)\n\n            // Allocate EC points table with dimensions N_TABLES by N_HASHES.\n            let table := mload(0x40)\n            let tableEnd := add(table, mul(rowSize, /*N_TABLES*/63))\n\n            // for i = 0..N_TABLES-1, fill the i'th row in the table.\n            for { let i := 0 } lt(i, 63) { i := add(i, 1)} {\n                if iszero(staticcall(gas, sload(i), add(proof, i), rowSize,\n                                     add(table, mul(i, rowSize)), rowSize)) {\n                   returndatacopy(0, 0, returndatasize)\n                   revert(0, returndatasize)\n                }\n            }\n\n            // The following variables are allocated above PRIME to avoid the stack too deep error.\n            // Byte offset used to access the table and proof.\n            let offset := 0\n            let ptr\n            let aZ\n\n            let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\n\n            // For k = 0..HASHES-1, Compute the k'th hash by summing the k'th column in table.\n            // Instead of k we use offset := k * sizeof(EC point).\n            // Additonally we use ptr := offset + j * rowSize to ge over the EC points we want\n            // to sum.\n            for { } lt(offset, rowSize) { } {\n                // Init (aX, aY, aZ) to the first value in the current column and sum over the\n                // column.\n                ptr := add(table, offset)\n                aZ := 1\n                let aX := mload(ptr)\n                let aY := mload(add(ptr, 0x20))\n\n                for { ptr := add(ptr, rowSize) } lt(ptr, tableEnd)\n                    { ptr:= add(ptr, rowSize) } {\n\n                    let bX := mload(ptr)\n                    let bY := mload(add(ptr, 0x20))\n\n                    // Set (aX, aY, aZ) to be the sum of the EC points (aX, aY, aZ) and (bX, bY, 1).\n                    let minusAZ := sub(PRIME, aZ)\n                    // Slope = sN/sD =  {(aY/aZ) - (bY/1)} / {(aX/aZ) - (bX/1)}.\n                    // sN = aY - bY * aZ.\n                    let sN := addmod(aY, mulmod(minusAZ, bY, PRIME), PRIME)\n\n                    let minusAZBX := mulmod(minusAZ, bX, PRIME)\n                    // sD = aX - bX * aZ.\n                    let sD := addmod(aX, minusAZBX, PRIME)\n\n                    let sSqrD := mulmod(sD, sD, PRIME)\n\n                    // Compute the (affine) x coordinate of the result as xN/xD.\n\n                    // (xN/xD) = ((sN)^2/(sD)^2) - (aX/aZ) - (bX/1).\n                    // xN = (sN)^2 * aZ - aX * (sD)^2 - bX * (sD)^2 * aZ.\n                    // = (sN)^2 * aZ + (sD^2) (bX * (-aZ) - aX).\n                    let xN := addmod(mulmod(mulmod(sN, sN, PRIME), aZ, PRIME),\n                                    mulmod(sSqrD,\n                                            add(minusAZBX, sub(PRIME, aX)),\n                                            PRIME),\n                                    PRIME)\n\n                    // xD = (sD)^2 * aZ.\n                    let xD := mulmod(sSqrD, aZ, PRIME)\n\n                    // Compute (aX', aY', aZ') for the next iteration and assigning them to (aX, aY, aZ).\n                    // (y/z) = (sN/sD) * {(bX/1) - (xN/xD)} - (bY/1).\n                    // aZ' = sD*xD.\n                    aZ := mulmod(sD, xD, PRIME)\n                    // aY' = sN*(bX * xD - xN) - bY*z = -bY * z + sN * (-xN + xD*bX).\n                    aY := addmod(sub(PRIME, mulmod(bY, aZ, PRIME)),\n                                    mulmod(sN,\n                                    add(sub(PRIME, xN),\n                                        mulmod(xD, bX, PRIME)),\n                                    PRIME),\n                                PRIME)\n\n                    // As the value of the affine x coordinate is xN/xD and z=sD*xD,\n                    // the projective x coordinate is xN*sD.\n                    aX := mulmod(xN, sD, PRIME)\n                }\n\n                // At this point proof[offset + 0x40] holds the next input to be hashed.\n                // This input is typically in the form left_node||right_node||0 and\n                // we need to extract the relevent node for the consistent check below.\n                // Note that the same logic is reused for the leaf computation and\n                // for the consistent check with the final root.\n                offset := add(offset, 0x40)\n\n                // Init expected_hash to left_node.\n                // It will be replaced by right_node if necessary.\n                let expected_hash := shr(4, mload(add(proof, offset)))\n\n                let other_node := and(  // right_node\n                    mload(add(proof, add(offset, 0x1f))),\n                    0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n                // Make sure both nodes are in the range [0, PRIME - 1].\n                if or(gt(expected_hash, primeMinusOne), gt(other_node, primeMinusOne)) {\n                    raise_error(\"Value out of range.\", 19)\n                }\n\n                if and(nodeSelectors, 1) {\n                    expected_hash := other_node\n                }\n\n                // Make sure the result is consistent with the Merkle path.\n                // I.e (aX/aZ) == expected_hash,\n                // where expected_hash = (nodeSelectors & 1) == 0 ? left_node : right_node.\n                // We also make sure aZ is not 0. I.e. during the summation we never tried\n                // to add two points with the same x coordinate.\n                // This is not strictly necessary because knowing how to trigger this condition\n                // implies knowing a non-trivial linear equation on the random points defining the\n                // hash function.\n                if iszero(aZ) {\n                   raise_error(\"aZ is zero.\", 11)\n                }\n\n                if sub(aX, mulmod(expected_hash, aZ, PRIME))/*!=0*/ {\n                   raise_error(\"Bad Merkle path.\", 16)\n                }\n                nodeSelectors := shr(1, nodeSelectors)\n            }\n\n            mstore(0, starkKey)\n            mstore(0x20,  tokenId)\n            mstore(0x40,  // quantizedAmount\n                   and(mload(add(proof, 0x5f)),\n                       0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))\n            mstore(0x60, shr(4, mload(add(proof, rowSize)))) // vaultRoot\n            mstore(0x80, height)\n            mstore(0xa0, vaultId)\n\n            // claimHash := keccak256(\n            //      starkKey, tokenId, quantizedAmount, vaultRoot, height, vaultId).\n            // storage[claimHash] := 1.\n            sstore(keccak256(0, 0xc0), 1)\n        }\n    }\n\n\n    /*\n      Checks the validity status of the claim corresponding to:\n      keccak256(abi.encode(starkKey, tokenId, quantizedAmount, root, height, vaultId)).\n    */\n    function isValid(bytes32 hash)\n    external view returns(bool val)\n    {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            val := sload(hash)\n        }\n    }\n}\n",
  "sourcePath": "/Users/gokulalex/Apps/eth_apps/VerityNet/starkex-deployment/scalable-dex/contracts/components/EscapeVerifier.sol",
  "ast": {
    "absolutePath": "/Users/gokulalex/Apps/eth_apps/VerityNet/starkex-deployment/scalable-dex/contracts/components/EscapeVerifier.sol",
    "exportedSymbols": {
      "EscapeVerifier": [
        1037
      ]
    },
    "id": 1038,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 918,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/Users/gokulalex/Apps/eth_apps/VerityNet/starkex-deployment/scalable-dex/contracts/interfaces/IFactRegistry.sol",
        "file": "../interfaces/IFactRegistry.sol",
        "id": 919,
        "nodeType": "ImportDirective",
        "scope": 1038,
        "sourceUnit": 4801,
        "src": "25:41:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 920,
              "name": "IFactRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4800,
              "src": "291:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IFactRegistry_$4800",
                "typeString": "contract IFactRegistry"
              }
            },
            "id": 921,
            "nodeType": "InheritanceSpecifier",
            "src": "291:13:6"
          }
        ],
        "contractDependencies": [
          4800
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1037,
        "linearizedBaseContracts": [
          1037,
          4800
        ],
        "name": "EscapeVerifier",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 924,
            "name": "N_TABLES",
            "nodeType": "VariableDeclaration",
            "scope": 1037,
            "src": "373:39:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 922,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "373:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3633",
              "id": 923,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "410:2:6",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_63_by_1",
                "typeString": "int_const 63"
              },
              "value": "63"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 928,
            "name": "lookupTables",
            "nodeType": "VariableDeclaration",
            "scope": 1037,
            "src": "419:30:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$63_storage",
              "typeString": "address[63]"
            },
            "typeName": {
              "baseType": {
                "id": 925,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "419:7:6",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 927,
              "length": {
                "argumentTypes": null,
                "id": 926,
                "name": "N_TABLES",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 924,
                "src": "427:8:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "ArrayTypeName",
              "src": "419:17:6",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$63_storage_ptr",
                "typeString": "address[63]"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 940,
              "nodeType": "Block",
              "src": "515:528:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 937,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 935,
                      "name": "lookupTables",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 928,
                      "src": "525:12:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$63_storage",
                        "typeString": "address[63] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 936,
                      "name": "tables",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 932,
                      "src": "540:6:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$63_memory_ptr",
                        "typeString": "address[63] memory"
                      }
                    },
                    "src": "525:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$63_storage",
                      "typeString": "address[63] storage ref"
                    }
                  },
                  "id": 938,
                  "nodeType": "ExpressionStatement",
                  "src": "525:21:6"
                },
                {
                  "externalReferences": [
                    {
                      "lookupTables_slot": {
                        "declaration": 928,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "650:17:6",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 939,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    if gt(lookupTables_slot, 0) { revert(0, 0) }\n}",
                  "src": "621:416:6"
                }
              ]
            },
            "documentation": null,
            "id": 941,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 933,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 932,
                  "name": "tables",
                  "nodeType": "VariableDeclaration",
                  "scope": 941,
                  "src": "467:31:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$63_memory_ptr",
                    "typeString": "address[63]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 929,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "467:7:6",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 931,
                    "length": {
                      "argumentTypes": null,
                      "id": 930,
                      "name": "N_TABLES",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 924,
                      "src": "475:8:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "467:17:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$63_storage_ptr",
                      "typeString": "address[63]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "466:33:6"
            },
            "returnParameters": {
              "id": 934,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "515:0:6"
            },
            "scope": 1037,
            "src": "455:588:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1026,
              "nodeType": "Block",
              "src": "5054:9468:6",
              "statements": [
                {
                  "assignments": [
                    948
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 948,
                      "name": "proofLength",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "5064:19:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 947,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5064:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 951,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 949,
                      "name": "escapeProof",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 944,
                      "src": "5086:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                        "typeString": "uint256[] calldata"
                      }
                    },
                    "id": 950,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "5086:18:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5064:40:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 955,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 953,
                          "name": "proofLength",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 948,
                          "src": "5458:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "3638",
                          "id": 954,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5473:2:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_68_by_1",
                            "typeString": "int_const 68"
                          },
                          "value": "68"
                        },
                        "src": "5458:17:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "50726f6f6620746f6f2073686f72742e",
                        "id": 956,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5477:18:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_78daa37d510af266b2d6d5881254da716ad2c2059f39389d72bbcd5057f51dd0",
                          "typeString": "literal_string \"Proof too short.\""
                        },
                        "value": "Proof too short."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_78daa37d510af266b2d6d5881254da716ad2c2059f39389d72bbcd5057f51dd0",
                          "typeString": "literal_string \"Proof too short.\""
                        }
                      ],
                      "id": 952,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5801,
                        5802
                      ],
                      "referencedDeclaration": 5802,
                      "src": "5450:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 957,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5450:46:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 958,
                  "nodeType": "ExpressionStatement",
                  "src": "5450:46:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 962,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 960,
                          "name": "proofLength",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 948,
                          "src": "5711:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "323030",
                          "id": 961,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5725:3:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_200_by_1",
                            "typeString": "int_const 200"
                          },
                          "value": "200"
                        },
                        "src": "5711:17:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "50726f6f6620746f6f206c6f6e672e",
                        "id": 963,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5730:17:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_911a019e4152c13d3fc7efd7df4732179846f35c5967ec7e85e5bc7c299e88a1",
                          "typeString": "literal_string \"Proof too long.\""
                        },
                        "value": "Proof too long."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_911a019e4152c13d3fc7efd7df4732179846f35c5967ec7e85e5bc7c299e88a1",
                          "typeString": "literal_string \"Proof too long.\""
                        }
                      ],
                      "id": 959,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5801,
                        5802
                      ],
                      "referencedDeclaration": 5802,
                      "src": "5703:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 964,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5703:45:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 965,
                  "nodeType": "ExpressionStatement",
                  "src": "5703:45:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 972,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 969,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 967,
                                "name": "proofLength",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 948,
                                "src": "5828:11:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 968,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5842:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "5828:15:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 970,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "5827:17:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 971,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5848:1:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "5827:22:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "50726f6f66206c656e677468206d757374206265206576656e2e",
                        "id": 973,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5851:28:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5aef78b1f9c8639b30ee165fea21157582e65f635564caa31147ac0f24c83d2f",
                          "typeString": "literal_string \"Proof length must be even.\""
                        },
                        "value": "Proof length must be even."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5aef78b1f9c8639b30ee165fea21157582e65f635564caa31147ac0f24c83d2f",
                          "typeString": "literal_string \"Proof length must be even.\""
                        }
                      ],
                      "id": 966,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5801,
                        5802
                      ],
                      "referencedDeclaration": 5802,
                      "src": "5819:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 974,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5819:61:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 975,
                  "nodeType": "ExpressionStatement",
                  "src": "5819:61:6"
                },
                {
                  "assignments": [
                    977
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 977,
                      "name": "nHashes",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "5982:15:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 976,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5982:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 984,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 980,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 978,
                            "name": "proofLength",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 948,
                            "src": "6001:11:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 979,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6015:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "6001:15:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 981,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "6000:17:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 982,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6020:1:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "6000:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5982:39:6"
                },
                {
                  "assignments": [
                    986
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 986,
                      "name": "height",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "6080:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 985,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6080:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 990,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 989,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 987,
                      "name": "nHashes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 977,
                      "src": "6097:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 988,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6107:1:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "6097:11:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6080:28:6"
                },
                {
                  "assignments": [
                    992
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 992,
                      "name": "vaultId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "6283:15:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 991,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6283:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1000,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 999,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 993,
                        "name": "escapeProof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 944,
                        "src": "6301:11:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      "id": 997,
                      "indexExpression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 996,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 994,
                          "name": "proofLength",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 948,
                          "src": "6313:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 995,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6327:1:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "6313:15:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6301:28:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">>",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "38",
                      "id": 998,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6333:1:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_8_by_1",
                        "typeString": "int_const 8"
                      },
                      "value": "8"
                    },
                    "src": "6301:33:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6283:51:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1006,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1002,
                          "name": "vaultId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 992,
                          "src": "6352:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1005,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 1003,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6362:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "**",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1004,
                            "name": "height",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 986,
                            "src": "6365:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6362:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6352:19:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "7661756c744964206e6f7420696e20747265652e",
                        "id": 1007,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6373:22:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8a778963b551454da46b66fe25f7d277ac8302676119f5f9a4b671db9a9831ba",
                          "typeString": "literal_string \"vaultId not in tree.\""
                        },
                        "value": "vaultId not in tree."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8a778963b551454da46b66fe25f7d277ac8302676119f5f9a4b671db9a9831ba",
                          "typeString": "literal_string \"vaultId not in tree.\""
                        }
                      ],
                      "id": 1001,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5801,
                        5802
                      ],
                      "referencedDeclaration": 5802,
                      "src": "6344:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1008,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6344:52:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1009,
                  "nodeType": "ExpressionStatement",
                  "src": "6344:52:6"
                },
                {
                  "assignments": [
                    1011
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1011,
                      "name": "rowSize",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "6407:15:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1010,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6407:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1018,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1017,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1014,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 1012,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6426:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1013,
                            "name": "nHashes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 977,
                            "src": "6430:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6426:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1015,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "6425:13:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "*",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30783230",
                      "id": 1016,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6441:4:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_32_by_1",
                        "typeString": "int_const 32"
                      },
                      "value": "0x20"
                    },
                    "src": "6425:20:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6407:38:6"
                },
                {
                  "assignments": [
                    1022
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1022,
                      "name": "proof",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "6455:22:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 1020,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6455:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1021,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "6455:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1024,
                  "initialValue": {
                    "argumentTypes": null,
                    "id": 1023,
                    "name": "escapeProof",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 944,
                    "src": "6480:11:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                      "typeString": "uint256[] calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6455:36:6"
                },
                {
                  "externalReferences": [
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "6639:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "6652:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "7378:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "7427:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "vaultId": {
                        "declaration": 992,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "7907:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8075:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14201:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14208:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14052:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "height": {
                        "declaration": 986,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14258:6:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "vaultId": {
                        "declaration": 992,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14291:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8289:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8364:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8300:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8375:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9155:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "12422:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9482:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9548:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "12524:5:6",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1025,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    proof := add(proof, 0x20)\n    function raise_error(message, msg_len)\n    {\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        mstore(0x4, 0x20)\n        mstore(0x24, msg_len)\n        mstore(0x44, message)\n        revert(0, add(0x44, msg_len))\n    }\n    let starkKey := shr(4, mload(proof))\n    let tokenId := and(mload(add(proof, 0x1f)), 0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n    let primeMinusOne := 0x800000000000011000000000000000000000000000000000000000000000000\n    if or(gt(starkKey, primeMinusOne), gt(tokenId, primeMinusOne))\n    {\n        raise_error(\"Bad starkKey or tokenId.\", 24)\n    }\n    let nodeSelectors := shl(1, vaultId)\n    let table := mload(0x40)\n    let tableEnd := add(table, mul(rowSize, 63))\n    for { let i := 0 } lt(i, 63) { i := add(i, 1) }\n    {\n        if iszero(staticcall(gas(), sload(i), add(proof, i), rowSize, add(table, mul(i, rowSize)), rowSize))\n        {\n            returndatacopy(0, 0, returndatasize())\n            revert(0, returndatasize())\n        }\n    }\n    let offset := 0\n    let ptr\n    let aZ\n    let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\n    for { } lt(offset, rowSize) { }\n    {\n        ptr := add(table, offset)\n        aZ := 1\n        let aX := mload(ptr)\n        let aY := mload(add(ptr, 0x20))\n        for { ptr := add(ptr, rowSize) }\n        lt(ptr, tableEnd)\n        { ptr := add(ptr, rowSize) }\n        {\n            let bX := mload(ptr)\n            let bY := mload(add(ptr, 0x20))\n            let minusAZ := sub(PRIME, aZ)\n            let sN := addmod(aY, mulmod(minusAZ, bY, PRIME), PRIME)\n            let minusAZBX := mulmod(minusAZ, bX, PRIME)\n            let sD := addmod(aX, minusAZBX, PRIME)\n            let sSqrD := mulmod(sD, sD, PRIME)\n            let xN := addmod(mulmod(mulmod(sN, sN, PRIME), aZ, PRIME), mulmod(sSqrD, add(minusAZBX, sub(PRIME, aX)), PRIME), PRIME)\n            let xD := mulmod(sSqrD, aZ, PRIME)\n            aZ := mulmod(sD, xD, PRIME)\n            aY := addmod(sub(PRIME, mulmod(bY, aZ, PRIME)), mulmod(sN, add(sub(PRIME, xN), mulmod(xD, bX, PRIME)), PRIME), PRIME)\n            aX := mulmod(xN, sD, PRIME)\n        }\n        offset := add(offset, 0x40)\n        let expected_hash := shr(4, mload(add(proof, offset)))\n        let other_node := and(mload(add(proof, add(offset, 0x1f))), 0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        if or(gt(expected_hash, primeMinusOne), gt(other_node, primeMinusOne))\n        {\n            raise_error(\"Value out of range.\", 19)\n        }\n        if and(nodeSelectors, 1) { expected_hash := other_node }\n        if iszero(aZ)\n        {\n            raise_error(\"aZ is zero.\", 11)\n        }\n        if sub(aX, mulmod(expected_hash, aZ, PRIME))\n        {\n            raise_error(\"Bad Merkle path.\", 16)\n        }\n        nodeSelectors := shr(1, nodeSelectors)\n    }\n    mstore(0, starkKey)\n    mstore(0x20, tokenId)\n    mstore(0x40, and(mload(add(proof, 0x5f)), 0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))\n    mstore(0x60, shr(4, mload(add(proof, rowSize))))\n    mstore(0x80, height)\n    mstore(0xa0, vaultId)\n    sstore(keccak256(0, 0xc0), 1)\n}",
                  "src": "6565:7951:6"
                }
              ]
            },
            "documentation": "Verifies that the contents of a vault belong to a certain Merkle commitment (root).\nThe Merkle commitment uses the Pedersen hash variation described next:\n- **Hash constants:** A sequence :math:`p_i` of 504 points on an elliptic curve and an additional :math:`ec_{shift}` point\n- **Input:** A vector of 504 bits :math:`b_i`\n- **Output:** The 252 bits x coordinate of :math:`(ec_{shift} + \\sum_i b_i*p_i)`\nThe following table describes the expected `escapeProof` format. Note that unlike a standard\nMerkle proof, the `escapeProof` contains both the nodes along the Merkle path and their\nsiblings. The proof ends with the expected root and the ID of the vault for which the proof is\nsubmitted (which implies the location of the nodes within the Merkle tree).\n+-------------------------------+---------------------------+-----------+\n| starkKey (252)                | tokenId (252)             | zeros (8) |\n+-------------------------------+---------------------------+-----------+\n| hash(starkKey, tokenId) (252) | quantizedAmount (252)     | zeros (8) |\n+-------------------------------+---------------------------+-----------+\n| left_node_0 (252)             | right_node_0 (252)        | zeros (8) |\n+-------------------------------+---------------------------+-----------+\n| ...                                                                   |\n+-------------------------------+---------------------------+-----------+\n| left_node_n (252)             | right_node_n (252)        | zeros (8) |\n+-------------------------------+-----------+---------------+-----------+\n| root (252)                    | zeros (4) | vaultId (248) | zeros (8) |\n+-------------------------------+-----------+---------------+-----------+\nIf the proof is accepted, this is registered under the following claim hash that may later\nbe queried for validity:\n`claimHash = keccak256(starkKey, tokenId, quantizedAmount, vaultRoot, treeHeight, vaultId)`\nFor information about when this module is to be used, see :sol:mod:`Escapes`.",
            "id": 1027,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyEscape",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 945,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 944,
                  "name": "escapeProof",
                  "nodeType": "VariableDeclaration",
                  "scope": 1027,
                  "src": "5013:30:6",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 942,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5013:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 943,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "5013:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5012:32:6"
            },
            "returnParameters": {
              "id": 946,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5054:0:6"
            },
            "scope": 1037,
            "src": "4991:9531:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1035,
              "nodeType": "Block",
              "src": "14766:131:6",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "val": {
                        "declaration": 1032,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14863:3:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "hash": {
                        "declaration": 1029,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14876:4:6",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1034,
                  "nodeType": "InlineAssembly",
                  "operations": "{ val := sload(hash) }",
                  "src": "14840:51:6"
                }
              ]
            },
            "documentation": null,
            "id": 1036,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValid",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1030,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1029,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 1036,
                  "src": "14712:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1028,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "14712:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14711:14:6"
            },
            "returnParameters": {
              "id": 1033,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1032,
                  "name": "val",
                  "nodeType": "VariableDeclaration",
                  "scope": 1036,
                  "src": "14752:8:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1031,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14752:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14751:10:6"
            },
            "scope": 1037,
            "src": "14695:202:6",
            "stateMutability": "view",
            "superFunction": 4799,
            "visibility": "external"
          }
        ],
        "scope": 1038,
        "src": "264:14635:6"
      }
    ],
    "src": "0:14900:6"
  },
  "legacyAST": {
    "absolutePath": "/Users/gokulalex/Apps/eth_apps/VerityNet/starkex-deployment/scalable-dex/contracts/components/EscapeVerifier.sol",
    "exportedSymbols": {
      "EscapeVerifier": [
        1037
      ]
    },
    "id": 1038,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 918,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/Users/gokulalex/Apps/eth_apps/VerityNet/starkex-deployment/scalable-dex/contracts/interfaces/IFactRegistry.sol",
        "file": "../interfaces/IFactRegistry.sol",
        "id": 919,
        "nodeType": "ImportDirective",
        "scope": 1038,
        "sourceUnit": 4801,
        "src": "25:41:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 920,
              "name": "IFactRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4800,
              "src": "291:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IFactRegistry_$4800",
                "typeString": "contract IFactRegistry"
              }
            },
            "id": 921,
            "nodeType": "InheritanceSpecifier",
            "src": "291:13:6"
          }
        ],
        "contractDependencies": [
          4800
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1037,
        "linearizedBaseContracts": [
          1037,
          4800
        ],
        "name": "EscapeVerifier",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 924,
            "name": "N_TABLES",
            "nodeType": "VariableDeclaration",
            "scope": 1037,
            "src": "373:39:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 922,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "373:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3633",
              "id": 923,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "410:2:6",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_63_by_1",
                "typeString": "int_const 63"
              },
              "value": "63"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 928,
            "name": "lookupTables",
            "nodeType": "VariableDeclaration",
            "scope": 1037,
            "src": "419:30:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$63_storage",
              "typeString": "address[63]"
            },
            "typeName": {
              "baseType": {
                "id": 925,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "419:7:6",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 927,
              "length": {
                "argumentTypes": null,
                "id": 926,
                "name": "N_TABLES",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 924,
                "src": "427:8:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "ArrayTypeName",
              "src": "419:17:6",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$63_storage_ptr",
                "typeString": "address[63]"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 940,
              "nodeType": "Block",
              "src": "515:528:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 937,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 935,
                      "name": "lookupTables",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 928,
                      "src": "525:12:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$63_storage",
                        "typeString": "address[63] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 936,
                      "name": "tables",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 932,
                      "src": "540:6:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$63_memory_ptr",
                        "typeString": "address[63] memory"
                      }
                    },
                    "src": "525:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$63_storage",
                      "typeString": "address[63] storage ref"
                    }
                  },
                  "id": 938,
                  "nodeType": "ExpressionStatement",
                  "src": "525:21:6"
                },
                {
                  "externalReferences": [
                    {
                      "lookupTables_slot": {
                        "declaration": 928,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "650:17:6",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 939,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    if gt(lookupTables_slot, 0) { revert(0, 0) }\n}",
                  "src": "621:416:6"
                }
              ]
            },
            "documentation": null,
            "id": 941,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 933,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 932,
                  "name": "tables",
                  "nodeType": "VariableDeclaration",
                  "scope": 941,
                  "src": "467:31:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$63_memory_ptr",
                    "typeString": "address[63]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 929,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "467:7:6",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 931,
                    "length": {
                      "argumentTypes": null,
                      "id": 930,
                      "name": "N_TABLES",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 924,
                      "src": "475:8:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "467:17:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$63_storage_ptr",
                      "typeString": "address[63]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "466:33:6"
            },
            "returnParameters": {
              "id": 934,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "515:0:6"
            },
            "scope": 1037,
            "src": "455:588:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1026,
              "nodeType": "Block",
              "src": "5054:9468:6",
              "statements": [
                {
                  "assignments": [
                    948
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 948,
                      "name": "proofLength",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "5064:19:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 947,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5064:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 951,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 949,
                      "name": "escapeProof",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 944,
                      "src": "5086:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                        "typeString": "uint256[] calldata"
                      }
                    },
                    "id": 950,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "5086:18:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5064:40:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 955,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 953,
                          "name": "proofLength",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 948,
                          "src": "5458:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "3638",
                          "id": 954,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5473:2:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_68_by_1",
                            "typeString": "int_const 68"
                          },
                          "value": "68"
                        },
                        "src": "5458:17:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "50726f6f6620746f6f2073686f72742e",
                        "id": 956,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5477:18:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_78daa37d510af266b2d6d5881254da716ad2c2059f39389d72bbcd5057f51dd0",
                          "typeString": "literal_string \"Proof too short.\""
                        },
                        "value": "Proof too short."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_78daa37d510af266b2d6d5881254da716ad2c2059f39389d72bbcd5057f51dd0",
                          "typeString": "literal_string \"Proof too short.\""
                        }
                      ],
                      "id": 952,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5801,
                        5802
                      ],
                      "referencedDeclaration": 5802,
                      "src": "5450:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 957,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5450:46:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 958,
                  "nodeType": "ExpressionStatement",
                  "src": "5450:46:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 962,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 960,
                          "name": "proofLength",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 948,
                          "src": "5711:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "323030",
                          "id": 961,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5725:3:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_200_by_1",
                            "typeString": "int_const 200"
                          },
                          "value": "200"
                        },
                        "src": "5711:17:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "50726f6f6620746f6f206c6f6e672e",
                        "id": 963,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5730:17:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_911a019e4152c13d3fc7efd7df4732179846f35c5967ec7e85e5bc7c299e88a1",
                          "typeString": "literal_string \"Proof too long.\""
                        },
                        "value": "Proof too long."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_911a019e4152c13d3fc7efd7df4732179846f35c5967ec7e85e5bc7c299e88a1",
                          "typeString": "literal_string \"Proof too long.\""
                        }
                      ],
                      "id": 959,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5801,
                        5802
                      ],
                      "referencedDeclaration": 5802,
                      "src": "5703:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 964,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5703:45:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 965,
                  "nodeType": "ExpressionStatement",
                  "src": "5703:45:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 972,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 969,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 967,
                                "name": "proofLength",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 948,
                                "src": "5828:11:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 968,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5842:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "5828:15:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 970,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "5827:17:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 971,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5848:1:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "5827:22:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "50726f6f66206c656e677468206d757374206265206576656e2e",
                        "id": 973,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5851:28:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5aef78b1f9c8639b30ee165fea21157582e65f635564caa31147ac0f24c83d2f",
                          "typeString": "literal_string \"Proof length must be even.\""
                        },
                        "value": "Proof length must be even."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5aef78b1f9c8639b30ee165fea21157582e65f635564caa31147ac0f24c83d2f",
                          "typeString": "literal_string \"Proof length must be even.\""
                        }
                      ],
                      "id": 966,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5801,
                        5802
                      ],
                      "referencedDeclaration": 5802,
                      "src": "5819:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 974,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5819:61:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 975,
                  "nodeType": "ExpressionStatement",
                  "src": "5819:61:6"
                },
                {
                  "assignments": [
                    977
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 977,
                      "name": "nHashes",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "5982:15:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 976,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5982:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 984,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 980,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 978,
                            "name": "proofLength",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 948,
                            "src": "6001:11:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 979,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6015:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "6001:15:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 981,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "6000:17:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 982,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6020:1:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "6000:21:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5982:39:6"
                },
                {
                  "assignments": [
                    986
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 986,
                      "name": "height",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "6080:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 985,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6080:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 990,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 989,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 987,
                      "name": "nHashes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 977,
                      "src": "6097:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "32",
                      "id": 988,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6107:1:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "6097:11:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6080:28:6"
                },
                {
                  "assignments": [
                    992
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 992,
                      "name": "vaultId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "6283:15:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 991,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6283:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1000,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 999,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 993,
                        "name": "escapeProof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 944,
                        "src": "6301:11:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      "id": 997,
                      "indexExpression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 996,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 994,
                          "name": "proofLength",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 948,
                          "src": "6313:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 995,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6327:1:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "6313:15:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6301:28:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">>",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "38",
                      "id": 998,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6333:1:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_8_by_1",
                        "typeString": "int_const 8"
                      },
                      "value": "8"
                    },
                    "src": "6301:33:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6283:51:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1006,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1002,
                          "name": "vaultId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 992,
                          "src": "6352:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1005,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 1003,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6362:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "**",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1004,
                            "name": "height",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 986,
                            "src": "6365:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6362:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6352:19:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "7661756c744964206e6f7420696e20747265652e",
                        "id": 1007,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6373:22:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8a778963b551454da46b66fe25f7d277ac8302676119f5f9a4b671db9a9831ba",
                          "typeString": "literal_string \"vaultId not in tree.\""
                        },
                        "value": "vaultId not in tree."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8a778963b551454da46b66fe25f7d277ac8302676119f5f9a4b671db9a9831ba",
                          "typeString": "literal_string \"vaultId not in tree.\""
                        }
                      ],
                      "id": 1001,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5801,
                        5802
                      ],
                      "referencedDeclaration": 5802,
                      "src": "6344:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1008,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6344:52:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1009,
                  "nodeType": "ExpressionStatement",
                  "src": "6344:52:6"
                },
                {
                  "assignments": [
                    1011
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1011,
                      "name": "rowSize",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "6407:15:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1010,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6407:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1018,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1017,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1014,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 1012,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6426:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1013,
                            "name": "nHashes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 977,
                            "src": "6430:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6426:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1015,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "6425:13:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "*",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30783230",
                      "id": 1016,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6441:4:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_32_by_1",
                        "typeString": "int_const 32"
                      },
                      "value": "0x20"
                    },
                    "src": "6425:20:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6407:38:6"
                },
                {
                  "assignments": [
                    1022
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1022,
                      "name": "proof",
                      "nodeType": "VariableDeclaration",
                      "scope": 1026,
                      "src": "6455:22:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 1020,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6455:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1021,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "6455:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1024,
                  "initialValue": {
                    "argumentTypes": null,
                    "id": 1023,
                    "name": "escapeProof",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 944,
                    "src": "6480:11:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                      "typeString": "uint256[] calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6455:36:6"
                },
                {
                  "externalReferences": [
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "6639:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "6652:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "7378:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "7427:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "vaultId": {
                        "declaration": 992,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "7907:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8075:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14201:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14208:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14052:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "height": {
                        "declaration": 986,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14258:6:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "vaultId": {
                        "declaration": 992,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14291:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8289:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8364:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8300:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8375:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9155:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "12422:5:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9482:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "rowSize": {
                        "declaration": 1011,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9548:7:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "proof": {
                        "declaration": 1022,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "12524:5:6",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1025,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    proof := add(proof, 0x20)\n    function raise_error(message, msg_len)\n    {\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        mstore(0x4, 0x20)\n        mstore(0x24, msg_len)\n        mstore(0x44, message)\n        revert(0, add(0x44, msg_len))\n    }\n    let starkKey := shr(4, mload(proof))\n    let tokenId := and(mload(add(proof, 0x1f)), 0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n    let primeMinusOne := 0x800000000000011000000000000000000000000000000000000000000000000\n    if or(gt(starkKey, primeMinusOne), gt(tokenId, primeMinusOne))\n    {\n        raise_error(\"Bad starkKey or tokenId.\", 24)\n    }\n    let nodeSelectors := shl(1, vaultId)\n    let table := mload(0x40)\n    let tableEnd := add(table, mul(rowSize, 63))\n    for { let i := 0 } lt(i, 63) { i := add(i, 1) }\n    {\n        if iszero(staticcall(gas(), sload(i), add(proof, i), rowSize, add(table, mul(i, rowSize)), rowSize))\n        {\n            returndatacopy(0, 0, returndatasize())\n            revert(0, returndatasize())\n        }\n    }\n    let offset := 0\n    let ptr\n    let aZ\n    let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\n    for { } lt(offset, rowSize) { }\n    {\n        ptr := add(table, offset)\n        aZ := 1\n        let aX := mload(ptr)\n        let aY := mload(add(ptr, 0x20))\n        for { ptr := add(ptr, rowSize) }\n        lt(ptr, tableEnd)\n        { ptr := add(ptr, rowSize) }\n        {\n            let bX := mload(ptr)\n            let bY := mload(add(ptr, 0x20))\n            let minusAZ := sub(PRIME, aZ)\n            let sN := addmod(aY, mulmod(minusAZ, bY, PRIME), PRIME)\n            let minusAZBX := mulmod(minusAZ, bX, PRIME)\n            let sD := addmod(aX, minusAZBX, PRIME)\n            let sSqrD := mulmod(sD, sD, PRIME)\n            let xN := addmod(mulmod(mulmod(sN, sN, PRIME), aZ, PRIME), mulmod(sSqrD, add(minusAZBX, sub(PRIME, aX)), PRIME), PRIME)\n            let xD := mulmod(sSqrD, aZ, PRIME)\n            aZ := mulmod(sD, xD, PRIME)\n            aY := addmod(sub(PRIME, mulmod(bY, aZ, PRIME)), mulmod(sN, add(sub(PRIME, xN), mulmod(xD, bX, PRIME)), PRIME), PRIME)\n            aX := mulmod(xN, sD, PRIME)\n        }\n        offset := add(offset, 0x40)\n        let expected_hash := shr(4, mload(add(proof, offset)))\n        let other_node := and(mload(add(proof, add(offset, 0x1f))), 0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        if or(gt(expected_hash, primeMinusOne), gt(other_node, primeMinusOne))\n        {\n            raise_error(\"Value out of range.\", 19)\n        }\n        if and(nodeSelectors, 1) { expected_hash := other_node }\n        if iszero(aZ)\n        {\n            raise_error(\"aZ is zero.\", 11)\n        }\n        if sub(aX, mulmod(expected_hash, aZ, PRIME))\n        {\n            raise_error(\"Bad Merkle path.\", 16)\n        }\n        nodeSelectors := shr(1, nodeSelectors)\n    }\n    mstore(0, starkKey)\n    mstore(0x20, tokenId)\n    mstore(0x40, and(mload(add(proof, 0x5f)), 0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))\n    mstore(0x60, shr(4, mload(add(proof, rowSize))))\n    mstore(0x80, height)\n    mstore(0xa0, vaultId)\n    sstore(keccak256(0, 0xc0), 1)\n}",
                  "src": "6565:7951:6"
                }
              ]
            },
            "documentation": "Verifies that the contents of a vault belong to a certain Merkle commitment (root).\nThe Merkle commitment uses the Pedersen hash variation described next:\n- **Hash constants:** A sequence :math:`p_i` of 504 points on an elliptic curve and an additional :math:`ec_{shift}` point\n- **Input:** A vector of 504 bits :math:`b_i`\n- **Output:** The 252 bits x coordinate of :math:`(ec_{shift} + \\sum_i b_i*p_i)`\nThe following table describes the expected `escapeProof` format. Note that unlike a standard\nMerkle proof, the `escapeProof` contains both the nodes along the Merkle path and their\nsiblings. The proof ends with the expected root and the ID of the vault for which the proof is\nsubmitted (which implies the location of the nodes within the Merkle tree).\n+-------------------------------+---------------------------+-----------+\n| starkKey (252)                | tokenId (252)             | zeros (8) |\n+-------------------------------+---------------------------+-----------+\n| hash(starkKey, tokenId) (252) | quantizedAmount (252)     | zeros (8) |\n+-------------------------------+---------------------------+-----------+\n| left_node_0 (252)             | right_node_0 (252)        | zeros (8) |\n+-------------------------------+---------------------------+-----------+\n| ...                                                                   |\n+-------------------------------+---------------------------+-----------+\n| left_node_n (252)             | right_node_n (252)        | zeros (8) |\n+-------------------------------+-----------+---------------+-----------+\n| root (252)                    | zeros (4) | vaultId (248) | zeros (8) |\n+-------------------------------+-----------+---------------+-----------+\nIf the proof is accepted, this is registered under the following claim hash that may later\nbe queried for validity:\n`claimHash = keccak256(starkKey, tokenId, quantizedAmount, vaultRoot, treeHeight, vaultId)`\nFor information about when this module is to be used, see :sol:mod:`Escapes`.",
            "id": 1027,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyEscape",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 945,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 944,
                  "name": "escapeProof",
                  "nodeType": "VariableDeclaration",
                  "scope": 1027,
                  "src": "5013:30:6",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 942,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5013:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 943,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "5013:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5012:32:6"
            },
            "returnParameters": {
              "id": 946,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5054:0:6"
            },
            "scope": 1037,
            "src": "4991:9531:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1035,
              "nodeType": "Block",
              "src": "14766:131:6",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "val": {
                        "declaration": 1032,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14863:3:6",
                        "valueSize": 1
                      }
                    },
                    {
                      "hash": {
                        "declaration": 1029,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "14876:4:6",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1034,
                  "nodeType": "InlineAssembly",
                  "operations": "{ val := sload(hash) }",
                  "src": "14840:51:6"
                }
              ]
            },
            "documentation": null,
            "id": 1036,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValid",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1030,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1029,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 1036,
                  "src": "14712:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1028,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "14712:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14711:14:6"
            },
            "returnParameters": {
              "id": 1033,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1032,
                  "name": "val",
                  "nodeType": "VariableDeclaration",
                  "scope": 1036,
                  "src": "14752:8:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1031,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14752:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14751:10:6"
            },
            "scope": 1037,
            "src": "14695:202:6",
            "stateMutability": "view",
            "superFunction": 4799,
            "visibility": "external"
          }
        ],
        "scope": 1038,
        "src": "264:14635:6"
      }
    ],
    "src": "0:14900:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.1",
  "updatedAt": "2020-10-21T18:42:18.026Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {
      "verifyEscape(uint256[])": {
        "notice": "Verifies that the contents of a vault belong to a certain Merkle commitment (root). The Merkle commitment uses the Pedersen hash variation described next: - **Hash constants:** A sequence :math:`p_i` of 504 points on an elliptic curve and an additional :math:`ec_{shift}` point - **Input:** A vector of 504 bits :math:`b_i` - **Output:** The 252 bits x coordinate of :math:`(ec_{shift} + \\sum_i b_i*p_i)` The following table describes the expected `escapeProof` format. Note that unlike a standard Merkle proof, the `escapeProof` contains both the nodes along the Merkle path and their siblings. The proof ends with the expected root and the ID of the vault for which the proof is submitted (which implies the location of the nodes within the Merkle tree). +-------------------------------+---------------------------+-----------+ | starkKey (252)                | tokenId (252)             | zeros (8) | +-------------------------------+---------------------------+-----------+ | hash(starkKey, tokenId) (252) | quantizedAmount (252)     | zeros (8) | +-------------------------------+---------------------------+-----------+ | left_node_0 (252)             | right_node_0 (252)        | zeros (8) | +-------------------------------+---------------------------+-----------+ | ...                                                                   | +-------------------------------+---------------------------+-----------+ | left_node_n (252)             | right_node_n (252)        | zeros (8) | +-------------------------------+-----------+---------------+-----------+ | root (252)                    | zeros (4) | vaultId (248) | zeros (8) | +-------------------------------+-----------+---------------+-----------+ If the proof is accepted, this is registered under the following claim hash that may later be queried for validity: `claimHash = keccak256(starkKey, tokenId, quantizedAmount, vaultRoot, treeHeight, vaultId)` For information about when this module is to be used, see :sol:mod:`Escapes`."
      }
    }
  }
}