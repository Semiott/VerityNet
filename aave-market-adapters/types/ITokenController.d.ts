/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ITokenControllerInterface extends Interface {
  functions: {
    faucet: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    instantMintThreshold: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class ITokenController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ITokenController;
  attach(addressOrName: string): ITokenController;
  deployed(): Promise<ITokenController>;

  on(event: EventFilter | string, listener: Listener): ITokenController;
  once(event: EventFilter | string, listener: Listener): ITokenController;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ITokenController;
  removeAllListeners(eventName: EventFilter | string): ITokenController;
  removeListener(eventName: any, listener: Listener): ITokenController;

  interface: ITokenControllerInterface;

  functions: {
    faucet(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    instantMintThreshold(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  faucet(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  instantMintThreshold(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    faucet(_amount: BigNumberish): Promise<BigNumber>;

    instantMintThreshold(): Promise<BigNumber>;
  };
}
