/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ISynthetixExchangeRatesInterface extends Interface {
  functions: {
    effectiveValue: TypedFunctionDescription<{
      encode([sourceCurrencyKey, sourceAmount, destinationCurrencyKey]: [
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    rateForCurrency: TypedFunctionDescription<{
      encode([currencyKey]: [Arrayish]): string;
    }>;
  };

  events: {};
}

export class ISynthetixExchangeRates extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): ISynthetixExchangeRates;
  attach(addressOrName: string): ISynthetixExchangeRates;
  deployed(): Promise<ISynthetixExchangeRates>;

  on(event: EventFilter | string, listener: Listener): ISynthetixExchangeRates;
  once(
    event: EventFilter | string,
    listener: Listener
  ): ISynthetixExchangeRates;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ISynthetixExchangeRates;
  removeAllListeners(eventName: EventFilter | string): ISynthetixExchangeRates;
  removeListener(eventName: any, listener: Listener): ISynthetixExchangeRates;

  interface: ISynthetixExchangeRatesInterface;

  functions: {
    effectiveValue(
      sourceCurrencyKey: Arrayish,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: Arrayish
    ): Promise<BigNumber>;

    rateForCurrency(currencyKey: Arrayish): Promise<BigNumber>;
  };

  effectiveValue(
    sourceCurrencyKey: Arrayish,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: Arrayish
  ): Promise<BigNumber>;

  rateForCurrency(currencyKey: Arrayish): Promise<BigNumber>;

  filters: {};

  estimate: {
    effectiveValue(
      sourceCurrencyKey: Arrayish,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: Arrayish
    ): Promise<BigNumber>;

    rateForCurrency(currencyKey: Arrayish): Promise<BigNumber>;
  };
}
