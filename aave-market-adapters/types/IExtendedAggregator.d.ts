/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IExtendedAggregatorInterface extends Interface {
  functions: {
    getPlatformId: TypedFunctionDescription<{ encode([]: []): string }>;

    getSubTokens: TypedFunctionDescription<{ encode([]: []): string }>;

    getToken: TypedFunctionDescription<{ encode([]: []): string }>;

    getTokenType: TypedFunctionDescription<{ encode([]: []): string }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class IExtendedAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IExtendedAggregator;
  attach(addressOrName: string): IExtendedAggregator;
  deployed(): Promise<IExtendedAggregator>;

  on(event: EventFilter | string, listener: Listener): IExtendedAggregator;
  once(event: EventFilter | string, listener: Listener): IExtendedAggregator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IExtendedAggregator;
  removeAllListeners(eventName: EventFilter | string): IExtendedAggregator;
  removeListener(eventName: any, listener: Listener): IExtendedAggregator;

  interface: IExtendedAggregatorInterface;

  functions: {
    getPlatformId(): Promise<BigNumber>;

    getSubTokens(): Promise<string[]>;

    getToken(): Promise<string>;

    getTokenType(): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;
  };

  getPlatformId(): Promise<BigNumber>;

  getSubTokens(): Promise<string[]>;

  getToken(): Promise<string>;

  getTokenType(): Promise<BigNumber>;

  latestAnswer(): Promise<BigNumber>;

  filters: {};

  estimate: {
    getPlatformId(): Promise<BigNumber>;

    getSubTokens(): Promise<BigNumber>;

    getToken(): Promise<BigNumber>;

    getTokenType(): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;
  };
}
