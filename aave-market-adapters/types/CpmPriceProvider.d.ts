/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CpmPriceProviderInterface extends Interface {
  functions: {
    FALLBACK_ORACLE: TypedFunctionDescription<{ encode([]: []): string }>;

    PEGGED_TO_ETH: TypedFunctionDescription<{ encode([]: []): string }>;

    PRICE_DEVIATION: TypedFunctionDescription<{ encode([]: []): string }>;

    TOKEN: TypedFunctionDescription<{ encode([]: []): string }>;

    TOKEN_DECIMALS: TypedFunctionDescription<{ encode([]: []): string }>;

    TOKEN_PRICE_PROVIDER: TypedFunctionDescription<{ encode([]: []): string }>;

    getPlatformId: TypedFunctionDescription<{ encode([]: []): string }>;

    getSubTokens: TypedFunctionDescription<{ encode([]: []): string }>;

    getToken: TypedFunctionDescription<{ encode([]: []): string }>;

    getTokenType: TypedFunctionDescription<{ encode([]: []): string }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    Setup: TypedEventDescription<{
      encodeTopics([
        creator,
        cpmToken,
        token,
        peggedToEth,
        priceDeviation,
        tokenPriceProvider,
        fallbackOracle,
        cpmTokenType,
        platformId
      ]: [
        string | null,
        string | null,
        string | null,
        null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class CpmPriceProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CpmPriceProvider;
  attach(addressOrName: string): CpmPriceProvider;
  deployed(): Promise<CpmPriceProvider>;

  on(event: EventFilter | string, listener: Listener): CpmPriceProvider;
  once(event: EventFilter | string, listener: Listener): CpmPriceProvider;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CpmPriceProvider;
  removeAllListeners(eventName: EventFilter | string): CpmPriceProvider;
  removeListener(eventName: any, listener: Listener): CpmPriceProvider;

  interface: CpmPriceProviderInterface;

  functions: {
    FALLBACK_ORACLE(): Promise<string>;

    PEGGED_TO_ETH(): Promise<boolean>;

    PRICE_DEVIATION(): Promise<BigNumber>;

    TOKEN(): Promise<string>;

    TOKEN_DECIMALS(): Promise<BigNumber>;

    TOKEN_PRICE_PROVIDER(): Promise<string>;

    getPlatformId(): Promise<BigNumber>;

    getSubTokens(): Promise<string[]>;

    getToken(): Promise<string>;

    getTokenType(): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;
  };

  FALLBACK_ORACLE(): Promise<string>;

  PEGGED_TO_ETH(): Promise<boolean>;

  PRICE_DEVIATION(): Promise<BigNumber>;

  TOKEN(): Promise<string>;

  TOKEN_DECIMALS(): Promise<BigNumber>;

  TOKEN_PRICE_PROVIDER(): Promise<string>;

  getPlatformId(): Promise<BigNumber>;

  getSubTokens(): Promise<string[]>;

  getToken(): Promise<string>;

  getTokenType(): Promise<BigNumber>;

  latestAnswer(): Promise<BigNumber>;

  filters: {
    Setup(
      creator: string | null,
      cpmToken: string | null,
      token: string | null,
      peggedToEth: null,
      priceDeviation: null,
      tokenPriceProvider: null,
      fallbackOracle: null,
      cpmTokenType: null,
      platformId: null
    ): EventFilter;
  };

  estimate: {
    FALLBACK_ORACLE(): Promise<BigNumber>;

    PEGGED_TO_ETH(): Promise<BigNumber>;

    PRICE_DEVIATION(): Promise<BigNumber>;

    TOKEN(): Promise<BigNumber>;

    TOKEN_DECIMALS(): Promise<BigNumber>;

    TOKEN_PRICE_PROVIDER(): Promise<BigNumber>;

    getPlatformId(): Promise<BigNumber>;

    getSubTokens(): Promise<BigNumber>;

    getToken(): Promise<BigNumber>;

    getTokenType(): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;
  };
}
