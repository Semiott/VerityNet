/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ISynthetixPriceProviderInterface extends Interface {
  functions: {
    getInverseSynth: TypedFunctionDescription<{ encode([]: []): string }>;

    getInverseSynthId: TypedFunctionDescription<{ encode([]: []): string }>;

    getPlatformId: TypedFunctionDescription<{ encode([]: []): string }>;

    getReferenceSynth: TypedFunctionDescription<{ encode([]: []): string }>;

    getSynth: TypedFunctionDescription<{ encode([]: []): string }>;

    getSynthId: TypedFunctionDescription<{ encode([]: []): string }>;

    isInverse: TypedFunctionDescription<{ encode([]: []): string }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class ISynthetixPriceProvider extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): ISynthetixPriceProvider;
  attach(addressOrName: string): ISynthetixPriceProvider;
  deployed(): Promise<ISynthetixPriceProvider>;

  on(event: EventFilter | string, listener: Listener): ISynthetixPriceProvider;
  once(
    event: EventFilter | string,
    listener: Listener
  ): ISynthetixPriceProvider;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ISynthetixPriceProvider;
  removeAllListeners(eventName: EventFilter | string): ISynthetixPriceProvider;
  removeListener(eventName: any, listener: Listener): ISynthetixPriceProvider;

  interface: ISynthetixPriceProviderInterface;

  functions: {
    getInverseSynth(): Promise<string>;

    getInverseSynthId(): Promise<string>;

    getPlatformId(): Promise<BigNumber>;

    getReferenceSynth(): Promise<string>;

    getSynth(): Promise<string>;

    getSynthId(): Promise<string>;

    isInverse(): Promise<boolean>;

    latestAnswer(): Promise<BigNumber>;
  };

  getInverseSynth(): Promise<string>;

  getInverseSynthId(): Promise<string>;

  getPlatformId(): Promise<BigNumber>;

  getReferenceSynth(): Promise<string>;

  getSynth(): Promise<string>;

  getSynthId(): Promise<string>;

  isInverse(): Promise<boolean>;

  latestAnswer(): Promise<BigNumber>;

  filters: {};

  estimate: {
    getInverseSynth(): Promise<BigNumber>;

    getInverseSynthId(): Promise<BigNumber>;

    getPlatformId(): Promise<BigNumber>;

    getReferenceSynth(): Promise<BigNumber>;

    getSynth(): Promise<BigNumber>;

    getSynthId(): Promise<BigNumber>;

    isInverse(): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;
  };
}
